

// 1. Iniciar processo de redefinição de senha (envia OTP)
router.post("/forgot-password", async (req, res) => {
  const { identifier } = req.body; // identifier pode ser username ou phone

  try {
    // Busca usuário por username ou phone
    const user = await User.findOne({
      $or: [{ username: identifier }, { phone: identifier }],
    });
    if (!user) {
      return res.status(404).json({ msg: "Usuário não encontrado." });
    }

    // Gera OTP e define expiração (10 minutos)
    const otp = generateOTP();
    const otpExpiry = new Date(Date.now() + 10 * 60 * 1000); // 10 minutos

    user.otp = otp;
    user.otpExpiry = otpExpiry;
    await user.save();

    // Formatar o telefone para formato internacional (+55XXXXXXXXXX)
    let phoneNumber = user.phone.replace(/\D/g, ""); // Remove não-dígitos
    if (!phoneNumber.startsWith("55")) {
      phoneNumber = "55" + phoneNumber; // Adiciona código do Brasil se necessário
    }
    phoneNumber = "+" + phoneNumber; // Adiciona +

    console.log(`Telefone original: ${user.phone}, Formatado: ${phoneNumber}`); // Log para debug

    // Envio via Twilio (CORREÇÃO: use phoneNumber em vez de user.phone)
    await client.messages.create({
      body: `Seu código OTP para redefinição de senha é: ${otp}. Expira em 10 minutos.`,
      from: process.env.TWILIO_PHONE,
      to: phoneNumber, // <- ALTERADO: use o telefone formatado
    });

    console.log(
      `OTP enviado: ${otp} para ${phoneNumber}`
    );

    res.json({
      msg: "Código OTP enviado para seu telefone. Verifique em alguns instantes.",
    });
  } catch (err) {
    console.error("Erro ao enviar SMS:", err.message);
    res.status(500).send("Erro no servidor");
  }
});

// ... (outros endpoints permanecem iguais)

// 3. Redefinir senha (após OTP válido)
router.post("/reset-password", async (req, res) => {
  const { userId, newPassword } = req.body; // userId vem da verificação OTP

  try {
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ msg: "Usuário não encontrado." });
    }

    if (!user.otp || new Date() > user.otpExpiry) {
      return res
        .status(400)
        .json({ msg: "Sessão de OTP inválida ou expirada." });
    }

    // Criptografa a nova senha
    const salt = await bcrypt.genSalt(10);
    user.password = await bcrypt.hash(newPassword, salt);

    // Limpa OTP (CORREÇÃO: remova o espaço após =)
    user.otp = undefined;
    user.otpExpiry = undefined;
    await user.save();

    res.json({
      msg: "Senha redefinida com sucesso. Faça login com a nova senha.",
    });
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Erro no servidor");
  }
});

// ... (resto do código)